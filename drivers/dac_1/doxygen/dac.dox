/*!
@defgroup dac DAC: Digital-to-Analog Converter Driver
@details The KSDK provides a peripheral driver for the Digital-to-Analog Converter (DAC)
         module of Kinetis devices.

This DAC is the 12-bit resolution digital-to-analog converters with programmable reference generator
output. Its output data items are loaded into a FIFO, so that various FIFO mode can be used to
output the value for user-defined sequence.

The DAC driver provides an user-friendly interface to operate the DAC peripheral. User can 
initialize/deinitialize the DAC driver, set data into FIFO, enable the interrupt or DMA for special
events so that the hardware can process the DAC output data automatically. Also, the configuration
for software and hardware trigger are also included in the driver.

# Typical use case {#DACTypUC}

## A simple use case to output the user-defined DAC value. {#DACSimpleBasic}

~~~~~{.c}

    // ...
    dac_config_t dacConfigStruct;

    /* Configure the DAC. */
    DAC_GetDefaultConfig(&dacConfigStruct);
    DAC_Init(DEMO_DAC_BASEADDR, &dacConfigStruct);
    DAC_Enable(DEMO_DAC_BASEADDR, true); /* Enable the logic and output. */

    DAC_SetData(DEMO_DAC_BASEADDR, dacValue);
    // The value in the first item would be converted. User can measure the output voltage from
    // DACx_OUT pin.
}

~~~~~

## Working with the trigger {#DACWithTrg}

Once more than one data is filled into the FIFO, the output pointer would move in configured mode
when a trigger come. This trigger can be from software or hardware, and move one item for each
trigger. Also, the interrupt/DMA event could be activated when the output pointer hits to the
configured position.

~~~~~{.c}

    volatile uint32_t g_DacIndex = 0U;
    volatile uint32_t g_DacInterruptDone = false;
    // User-defined wave for DAC output.
	const uint32_t g_DacValues[DEMO_DAC_VALUE_ARRAY_SIZE] = {
	    0U,   100,  200,  300,  400,  500,  600,  700,
	    800,  900,  1000, 1100, 1200, 1300, 1400, 1500,
	    1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300,
	    2400, 2500, 2600, 2700, 2800, 2900, 3000, 3100};

	int main(void)
	{
	    dac_config_t dacConfigStruct;

        // ...

	    // Configure the DAC.
	    DAC_GetDefaultConfig(&dacConfigStruct);
	    dacConfigStruct.fifoTriggerMode = kDAC_FIFOTriggerBySoftwareMode; // Software trigger.
	    dacConfigStruct.fifoWorkMode = kDAC_FIFOWorkAsNormalMode;         // Normal FIFO mode.
	    dacConfigStruct.fifoWatermarkLevel = 4U;                          // Watermark.
	    DAC_Init(DEMO_DAC_BASEADDR, &dacConfigStruct);
	    DAC_Enable(DEMO_DAC_BASEADDR, true); // Enable output.

	    PRINTF("Press any key to trigger the DAC...\r\n");
	    // Enable DAC interrupts.
	    DAC_EnableInterrupts(DEMO_DAC_BASEADDR, kDAC_FIFOEmptyInterruptEnable);
	    EnableIRQ(DEMO_DAC_IRQ_ID); // Enable interrupt in NVIC.

	    while (1)
	    {
	        // Trigger the buffer and move the pointer.
	        GETCHAR();
	        DAC_DoSoftwareTriggerFIFO(DEMO_DAC_BASEADDR);

	        // Wait.
	        while (!g_DacInterruptDone)
	        {
	        }
	        g_DacInterruptDone = false;

	        PRINTF("DAC next output: %d\r\n", g_DacValues[g_DacIndex]);
	    }
	}

	// IRQ function for DAC buffer interrupt
	void DEMO_DAC_IRQ_HANDLER_FUNC(void)
	{
	    uint32_t flags = DAC_GetStatusFlags(DEMO_DAC_BASEADDR);

	    if (0U != (kDAC_FIFOEmptyFlag & flags))
	    {
	        if (g_DacIndex >= (DEMO_DAC_VALUE_ARRAY_SIZE - 1U))
	        {
	            g_DacIndex = 0U;
	        }
	        else
	        {
	            g_DacIndex++;
	        }
	        DAC_SetData(DEMO_DAC_BASEADDR, g_DacValues[g_DacIndex]);
	    }
	    g_DacInterruptDone = true;
	}

~~~~~

*/

