/*!
@defgroup rit RIT: Repetitive Interrupt Timer
@details The KSDK provides a driver for the Repetitive Interrupt Timer (RIT)
         of Kinetis devices.

# Function groups {#RITFunc}
The RIT driver supports operating the module as a time counter.

## Initialization and deinitialization {#RITInit}
The function RIT_Init() initializes the RIT with specified configurations. The function
RIT_GetDefaultConfig() gets the default configurations. The initialization function
configures the RIT operation normally in debug mode.

The function RIT_Deinit() disables the RIT timers and disables the module clock.

## Timer read and write Operations {#RITTimerPeriodOperation}
The function RIT_SetTimerCompare() sets the timer period in units of count. Timers counts
from 0 to the count value set here.
The function RIT_SetMaskBit() sets some bit which will be ignored in comparison
between the compare and counter register.

The function RIT_GetCurrentTimerCount() reads the current timer counting value.
This function returns the real-time timer counting value, in a range from 0 to a timer period.

The timer period operation functions takes the count value in ticks. User can call the utility macros
provided in fsl_common.h to convert to microseconds or milliseconds

## Start and Stop timer operations {#RITStartStopOperation}
The function RIT_StartTimer() starts the timer counting. After calling this function, the timer
counts up to the counter value set earlier by using the RIT_SetTimerCompare() function. Each time
the timer reaches the count value, it generates a trigger pulse and sets the interrupt flag and 
set the counter to zero/continue counting when RIT_ClearCounter() set the Timer clear enable/disable.

The function RIT_StopTimer() stops the timer counting./* resets the timer's counter register. */

## clear the count operations {#RITClearOperation}
The function RIT_ClearCounter() set the cuonter register to continue counting or clear the counter to zero
when the the counter value equals the masked compare value specified by the contents of COMPVAL/COMPVAL_H and
MASK/MASK_H registers.

## Status {#RITStatus}
Provides functions to get and clear the RIT status.

# Typical use case {#RITUseCase}

## RIT tick example {#RITTick}
~~~~~{.c}
/*
 * Copyright (c) 2016, Freescale Semiconductor, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "fsl_debug_console.h"
#include "board.h"
#include "app.h"
#include "fsl_rit.h"

/*******************************************************************************
 * Definitions
 ******************************************************************************/

/*******************************************************************************
 * Prototypes
 ******************************************************************************/

/*******************************************************************************
 * Variables
 ******************************************************************************/

/*******************************************************************************
 * Code
 ******************************************************************************/

/*!
 * @brief Main function
 */
int main(void)
{
    uint32_t Counter = 0U;
    /* Structure of initialize RIT */
    rit_config_t ritConfig;

    /* Board pin, clock, debug console init */
    BOARD_InitHardware();

    /*
     * ritConfig.enableRunInDebug = false;
     */
    RIT_GetDefaultConfig(&ritConfig);

    /* Init rit module */
    RIT_Init(RIT, &ritConfig);

    /* Set timer period for Compare register. */
    RIT_SetTimerCompare(RIT, 0xFFFFFFFFFFFFU);
    /* Set the register continue counter up when the counter value equals the set period. */
    RIT_ClearCounter(RIT, false);

    /* Enable at the NVIC */
    EnableIRQ(RIT_IRQ_ID);

    RIT_ClearStatusFlags(RIT, kRIT_TimerFlag);

    PRINTF("RIT Example Start:\r\n");
    /* Start counting */
    RIT_StartTimer(RIT);
    Counter = RIT_GetStatusFlags(RIT);
    if (Counter != 0U)
    {
        PRINTF("RIT interrupt succeed. \r\n");
    }
    while (1)
    {
    }
}

~~~~~

*/
