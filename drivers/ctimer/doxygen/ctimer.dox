/*!
@defgroup ctimer CTIMER: Standard counter/timers
@details The SDK provides a driver for the ctimer module of LPC devices.

# Function groups {#CTIMERFunc}
The ctimer driver supports the generation of PWM signals, input capture and
setting up the timer match conditions.

## Initialization and deinitialization {#CTIMERInit}
The function CTIMER_Init() initializes the ctimer with specified configurations. The function
CTIMER_GetDefaultConfig() gets the default configurations. The initialization function
configures the counter/timer mode and input selection when running in counter mode.

The function CTIMER_Deinit() stops the timer and turns off the module clock.

## PWM Operations {#CTIMERPwmOperation}
The function CTIMER_SetupPwm() sets up channels for PWM output. Each channel has its
own duty cycle, however the same PWM period is applied to all channels requesting the PWM output.
The signal duty cycle is provided as a percentage of the PWM period. Its value should be between 0 and 100
0=inactive signal(0% duty cycle) and 100=always active signal (100% duty cycle).

The function CTIMER_UpdatePwmDutycycle() updates the PWM signal duty cycle
of a particular channel.

## Match Operation {#CTIMERMatchOperation}
The function CTIMER_SetupMatch() sets up channels for match operation. Each channel is configured with
a match value, if the counter should stop on match, if counter should reset on match and output
pin action. The output signal can be cleared, set or toggled on match.

## Input capture operations {#CTIMERInpOperation}
The function CTIMER_SetupCapture() sets up an channel for input capture.
The user can specify the capture edge and if a interrupt should be generated when processing
the input signal.


# Typical use case {#CTimerCase}

## Match example {#CTIMERMatchExample}
Set up a match channel to toggle output when a match occurs.
~~~~~{.c}
int main(void)
{
    ctimer_config_t config;
    ctimer_match_config_t matchConfig;

    /* Init hardware*/
    BOARD_InitHardware();

    PRINTF("CTimer match example to toggle the output on a match\r\n");

    CTIMER_GetDefaultConfig(&config);

    CTIMER_Init(CTIMER, &config);

    matchConfig.enableCounterReset = true;
    matchConfig.enableCounterStop = false;
    matchConfig.matchValue = CLOCK_GetFreq(kCLOCK_BusClk) / 2;
    matchConfig.outControl = kCTIMER_Output_Toggle;
    matchConfig.outPinInitState = true;
    matchConfig.enableInterrupt = false;
    matchConfig.cb_func = NULL;
    CTIMER_SetupMatch(CTIMER, CTIMER_MAT_OUT, &matchConfig);
    CTIMER_StartTimer(CTIMER);

    while (1)
    {
    }
}
~~~~~

## PWM output example {#CTIMERPwmExample}
Set up a channel for PWM output.
~~~~~{.c}
int main(void)
{
    ctimer_config_t config;
    uint32_t srcClock_Hz;

    /* Init hardware*/
    BOARD_InitHardware();

    /* CTimer0 counter uses the AHB clock, some CTimer1 modules use the Aysnc clock */
    srcClock_Hz = CLOCK_GetFreq(kCLOCK_BusClk);

    PRINTF("CTimer example to generate a PWM signal\r\n");

    CTIMER_GetDefaultConfig(&config);

    CTIMER_Init(CTIMER, &config);
    CTIMER_SetupPwm(CTIMER, CTIMER_MAT_OUT, 20, 20000, srcClock_Hz, NULL);
    CTIMER_StartTimer(CTIMER);

    while (1)
    {
    }
}
~~~~~
*/
