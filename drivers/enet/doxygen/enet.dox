/*!
@page drv_err Driver errors status
 - #kStatus_ENET_RxFrameError = 4000
 - #kStatus_ENET_RxFrameFail = 4001
 - #kStatus_ENET_RxFrameEmpty = 4002
 - #kStatus_ENET_TxFrameBusy = 4003
 - #kStatus_ENET_TxFrameFail = 4004
 - #kStatus_ENET_PtpTsRingFull = 4005
 - #kStatus_ENET_PtpTsRingEmpty = 4006
*/

/*!
@defgroup enet ENET: Ethernet MAC Driver
@details The KSDK provides a peripheral driver for the 10/100 Mbps Ethernet MAC (ENET)
         module of Kinetis devices.

## MII interface Operation {#ENETMIIInterOps}

The MII interface is the interface connected with MAC and PHY.
the Serial management interface - MII management interface should be set before any access
to the external PHY chip register. Call ENET_SetSMI() to initialize MII management interface.
Use ENET_StartSMIRead(), ENET_StartSMIWrite(), and ENET_ReadSMIData() to read/write to PHY registers.
This function group sets up the MII and serial management SMI interface, gets data from the SMI interface,
and starts the SMI read and write command.
Use ENET_SetMII() to configure the MII before successfully getting data from the external PHY.

## MAC address filter {#ENETAddrFilter}

This group sets/gets the ENET mac address and the multicast group address filter.
ENET_AddMulticastGroup() should be called to add the ENET MAC to the multicast group.
The IEEE 1588 feature requires receiving the PTP message.

## Transactional Operation {#ENETTransOps}

For ENET receive, the ENET_GetRxFrameSize() function must be called to get the received data size. Then,
call the ENET_ReadFrame() function to get the received data. If the received error occurs, call the ENET_GetRxErrBeforeReadFrame() function
after ENET_GetRxFrameSize() and before ENET_ReadFrame() functions to get the detailed error information.

For ENET transmit, call the ENET_SendFrame() function to send the data out. The transmit data error information
is only accessible for the IEEE 1588 enhanced buffer descriptor mode. When the ENET_ENHANCEDBUFFERDESCRIPTOR_MODE is defined,
the ENET_GetTxErrAfterSendFrame() can be used to get the detail transmit error information.
The transmit error information can only be updated by uDMA after the data is transmitted. The ENET_GetTxErrAfterSendFrame() function
is recommended to be called on the transmit interrupt handler.

## PTP IEEE 1588 Feature Operation {#ENETPTP1588FeatureOps}

This function group configures the PTP IEEE 1588 feature, starts/stops/gets/sets/adjusts the PTP IEEE 1588 timer,
gets the receive/transmit frame timestamp, and PTP IEEE 1588 timer channel feature setting.

The ENET_Ptp1588Configure() function must be called when the ENET_ENHANCEDBUFFERDESCRIPTOR_MODE is defined and the IEEE 1588 feature
is required. The ENET_GetRxFrameTime() and ENET_GetTxFrameTime() functions are called by the PTP stack to get the timestamp
captured by the ENET driver.

# Typical use case {#ENETTpyUC}

## ENET Initialization, receive, and transmit operations {#ENETInitRxTxOps}

For the ENET_ENHANCEDBUFFERDESCRIPTOR_MODE undefined use case, use the legacy type buffer descriptor transmit/receive the frame as follows.
~~~~~{.c}
    enet_config_t config;
    uint32_t length = 0;
    uint32_t sysClock;
    uint32_t phyAddr = 0;
    bool link = false;
    phy_speed_t speed;
    phy_duplex_t duplex;
    enet_status_t result;
    enet_data_error_stats_t eErrorStatic;
    // Prepares the buffer configuration.
    enet_buffer_config_t buffCfg =
    {
        ENET_RXBD_NUM,
        ENET_TXBD_NUM,
        ENET_BuffSizeAlign(ENET_RXBUFF_SIZE),
        ENET_BuffSizeAlign(ENET_TXBUFF_SIZE),
        &RxBuffDescrip[0],  // Prepare buffers
        &TxBuffDescrip[0],  // Prepare buffers
        &RxDataBuff[0][0],  // Prepare buffers
        &TxDataBuff[0][0],  // Prepare buffers
    };

    sysClock = CLOCK_GetFreq(kCLOCK_CoreSysClk);

    // Gets the default configuration.
    ENET_GetDefaultConfig(&config);
    PHY_Init(EXAMPLE_ENET, 0, sysClock);
    // Changes the link status to PHY auto-negotiated link status.
    PHY_GetLinkStatus(EXAMPLE_ENET, phyAddr, &link);
    if (link)
    {
        PHY_GetLinkSpeedDuplex(EXAMPLE_ENET, phyAddr, &speed, &duplex);
        config.miiSpeed = (enet_mii_speed_t)speed;
        config.miiDuplex = (enet_mii_duplex_t)duplex;
    }
    ENET_Init(EXAMPLE_ENET, &handle, &config, &buffCfg, &macAddr[0], sysClock);
    ENET_ActiveRead(EXAMPLE_ENET);

    while (1)
    {
        // Gets the frame size.
        result = ENET_GetRxFrameSize(&handle, &length);
        // Calls the ENET_ReadFrame when there is a received frame.
        if (length != 0)
        {
            // Receives a valid frame and delivers the receive buffer with the size equal to length.
            uint8_t *data = (uint8_t *)malloc(length);
            ENET_ReadFrame(EXAMPLE_ENET, &handle, data, length);
            // Delivers the data to the upper layer.
            .........
            free(data);
        }
        else if (result == kStatus_ENET_RxFrameErr)
        {
           // Updates the received buffer when an error occurs.
           ENET_GetRxErrBeforeReadFrame(&handle, &eErrStatic);
           // Updates the receive buffer.
           ENET_ReadFrame(EXAMPLE_ENET, &handle, NULL, 0);
        }

       // Sends a multicast frame when the PHY is linked up.
       if(kStatus_Success == PHY_GetLinkStatus(EXAMPLE_ENET, phyAddr, &link))
       {
          if(link)
          {
             ENET_SendFrame(EXAMPLE_ENET, &handle, &frame[0], ENET_DATA_LENGTH);
          }
      }
  }
~~~~~

For the ENET_ENHANCEDBUFFERDESCRIPTOR_MODE defined use case, add the PTP IEEE 1588 configuration
to enable the PTP IEEE 1588 feature. The initialization occurs as follows.
~~~~~{.c}
    enet_config_t config;
    uint32_t length = 0;
    uint32_t sysClock;
    uint32_t phyAddr = 0;
    bool link = false;
    phy_speed_t speed;
    phy_duplex_t duplex;
    enet_status_t result;
    enet_data_err_stats_t eErrStatic;
    enet_buffer_config_t buffCfg =
    {
        ENET_RXBD_NUM,
        ENET_TXBD_NUM,
        ENET_BuffSizeAlign(ENET_RXBUFF_SIZE),
        ENET_BuffSizeAlign(ENET_TXBUFF_SIZE),
        &RxBuffDescrip[0],
        &TxBuffDescrip[0],
        &RxDataBuff[0][0],
        &TxDataBuff[0][0],
    };

    sysClock = CLOCK_GetFreq(kCLOCK_CoreSysClk);

    // Sets the PTP 1588 source.
    CLOCK_SetEnetTime0Clock(2);
    ptpClock = CLOCK_GetFreq(kCLOCK_Osc0ErClk);
    // Prepares the PTP configuration.
    enet_ptp_config_t ptpConfig =
    {
        ENET_RXBD_NUM,
        ENET_TXBD_NUM,
        &g_rxPtpTsBuff[0],
        &g_txPtpTsBuff[0],
        kENET_PtpTimerChannel1,
        ptpClock,
    };

    // Gets the default configuration.
    ENET_GetDefaultConfig(&config);

    PHY_Init(EXAMPLE_ENET, 0, sysClock);
    // Changes the link status to PHY auto-negotiated link status.
    PHY_GetLinkStatus(EXAMPLE_ENET, phyAddr, &link);
    if (link)
    {
        PHY_GetLinkSpeedDuplex(EXAMPLE_ENET, phyAddr, &speed, &duplex);
        config.miiSpeed = (enet_mii_speed_t)speed;
        config.miiDuplex = (enet_mii_duplex_t)duplex;
    }

    ENET_Init(EXAMPLE_ENET, &handle, &config, &buffCfg, &macAddr[0], sysClock);

    // Configures the PTP 1588 feature.
    ENET_Ptp1588Configure(EXAMPLE_ENET, &handle, &ptpConfig);
    // Adds the device to the PTP multicast group.
    ENET_AddMulticastGroup(EXAMPLE_ENET, &mGAddr[0]);

    ENET_ActiveRead(EXAMPLE_ENET);
~~~~~


*/
