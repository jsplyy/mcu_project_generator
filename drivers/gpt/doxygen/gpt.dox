/*!
@defgroup gpt_driver GPT Driver
@details The SDK provides a driver for the gpt module of i.MX devices.

# Function groups {#GPTFunc}
The gpt driver supports the generation of PWM signals, input capture and
setting up the timer match conditions.

## Initialization and deinitialization {#GPTInit}
The function GPT_Init() initializes the gpt with specified configurations. The function
GPT_GetDefaultConfig() gets the default configurations. The initialization function
configures the restart/free-run mode and input selection when running.

The function GPT_Deinit() stops the timer and turns off the module clock.

# Typical use case {#GptCase}

## GPT interrupt example {#GPTInterruptExample}
Set up a channel to trigger a periodic interrupt after every 1 second.
~~~~~{.c}
int main(void)
{
    uint32_t gptFreq;
    gpt_config_t gptConfig;

    /* Board pin, clock, debug console init */
    BOARD_InitHardware();

    GPT_GetDefaultConfig(&gptConfig);

    /* Initialize GPT module */
    GPT_Init(EXAMPLE_GPT, &gptConfig);

    /* Divide GPT clock source frequency by 3 inside GPT module */
    GPT_SetClockDivider(EXAMPLE_GPT, 3);

    /* Get GPT clock frequency */
    gptFreq = EXAMPLE_GPT_CLK_FREQ;

    /* GPT frequency is divided by 3 inside module */
    gptFreq /= 3;

    /* Set both GPT modules to 1 second duration */
    GPT_SetOutputCompareValue(EXAMPLE_GPT, kGPT_OutputCompare_Channel1, gptFreq);

    /* Enable GPT Output Compare1 interrupt */
    GPT_EnableInterrupts(EXAMPLE_GPT, kGPT_OutputCompare1InterruptEnable);

    /* Enable at the Interrupt */
    EnableIRQ(GPT_IRQ_ID);

    /* Start Timer */
    PRINTF("\r\nStarting GPT timer ...");
    GPT_StartTimer(EXAMPLE_GPT);

    while (true)
    {
        /* Check whether occur interupt and toggle LED */
        if (true == gptIsrFlag)
        {
            PRINTF("\r\n GPT interrupt is occured !");
            gptIsrFlag = false;
        }
        else
        {
            __WFI();
        }
    }
}
~~~~~
*/
