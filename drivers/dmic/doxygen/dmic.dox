/*!
@defgroup dmic DMIC: Digital Microphone
@details The SDK provides Peripheral driver for the Digital Microphone (DMIC) module.
 @n
DMIC driver is created to help user to operate the DMIC module better. This driver can be used to
performed basic and advance DMIC operations. Driver can be used to transfer data from DMIC to memory using DMA 
as well as in interrupt mode. DMIC, DMA transfer in pingpong mode is preferred as DMIC is a streaming 
device.   
 @n
 
# Function groups {#DMICFuncGrps}

## Initialization and deinitialization {#DMICInitDeinit}
This function group implements DMIC initialization and deinitialization API.
DMIC_Init() function Enables the clock to the DMIC register interface.
DMIC_Dinit() function Disables the clock to the DMIC register interface.

## Configuration {#DMICConfiguration}
This function group implements DMIC configration API.
DMIC_ConfigIO()function configures the use of PDM(Pulse Density moulation) pins.
DMIC_SetOperationMode()function configures the mode of operation either in DMA or in interrupt.
DMIC_ConfigChannel() function configures the various property of a DMIC channel.
DMIC_Use2fs()function configures the Clock scaling used for PCM data output.
DMIC_EnableChannnel() function enables a particualr DMIC channel.
DMIC_FifoChannel() function configures FIFO settings for a DMIC channel. 

## DMIC Data and status {#DMICDataStatus}
This function group implements the API to get data and status of DMIC FIFO.
DMIC_FifoGetStatus() function gives the status of a DMIC FIFO.
DMIC_ClearStatus() function clears the status of a DMIC FIFO.
DMIC_FifoGetData() function gets data from a DMIC FIFO.

## DMIC Interrupt Functions {#DMICInterrupt}
DMIC_EnablebleIntCallback() enables the interrupt for the selected DMIC peripheral.
DMIC_DisableIntCallback() disables the interrupt for the selected DMIC peripheral.

## DMIC HWVAD Functions {#HWVADFunction}
This function group implements the API for HWVAD
DMIC_SetGainNoiseEstHwvad() Sets the gain value for the noise estimator.
DMIC_SetGainSignalEstHwvad() Sets the gain value for the signal estimator.
DMIC_SetFilterCtrlHwvad() Sets the hwvad filter cutoff frequency parameter.
DMIC_SetInputGainHwvad() Sets the input gain of hwvad.
DMIC_CtrlClrIntrHwvad() Clears hwvad internal interrupt flag.
DMIC_FilterResetHwvad() Resets hwvad filters.
DMIC_GetNoiseEnvlpEst() Gets the value from output of the filter z7.

## DMIC HWVAD Interrupt Functions {#DMICHWVADInterrupt}
DMIC_HwvadEnableIntCallback() enables the hwvad interrupt for the selected DMIC peripheral.
DMIC_HwvadDisableIntCallback() disables the hwvad interrupt for the selected DMIC peripheral.

# Typical use case {#DMICTpyUC}

## DMIC DMA Configuration {#DMICDMAConfig}
~~~~~{.c}

    dmic_channel_config_t dmic_channel_cfg;
    dma_transfer_config_t transferConfig;

    BOARD_InitHardware();

    APPInit();
    dmic_channel_cfg.divhfclk = kDMIC_Pdm_Div1;
    dmic_channel_cfg.osr = 25U;
    dmic_channel_cfg.gainshft = 1U;
    dmic_channel_cfg.preac2coef = kDMIC_Comp0_0;
    dmic_channel_cfg.preac4coef = kDMIC_Comp0_0;
    dmic_channel_cfg.dc_cut_level = kDMIC_Dc_Cut155;
    dmic_channel_cfg.post_dc_gain_reduce = 0U;
    dmic_channel_cfg.saturate16bit = 1U;
    dmic_channel_cfg.sample_rate = kDMIC_Phy_Full_Speed;
    DMIC_Init(DMIC0);

    DMIC_CfgIO(DMIC0, kPDM_Dual);
    DMIC_Use2fs(DMIC0, true);
    DMIC_SetOpMode(DMIC0, kDMIC_Op_Dma);
    DMIC_CfgChannel(DMIC0, kDMIC_Ch0, kDMIC_Left, &dmic_channel_cfg);

    DMIC_FifoChannel(DMIC0, kDMIC_Ch0, FIFO_DEPTH, true, true);

    DMIC_EnableChannnel(DMIC0, DMIC_CHANEN_EN_CH0(1));

    PRINTF("Configure DMA\r\n");

    DMA_Init(DMA0);

    DMA_EnableChannel(DMA0, DMAREQ_DMIC0);

    /* Request dma channels from DMA manager. */
    DMA_CreateHandle(&g_DMA_Handle, DMA0, DMAREQ_DMIC0);

    DMA_SetCallback(&g_DMA_Handle, DMA_Callback, NULL);
    DMA_PrepareTransfer(&transferConfig, (void *)&DMIC0->CHANNEL[kDMIC_Ch0].FIFO_DATA, g_data_buffer, 2, BUFFER_LENGTH,
                        kDMA_PeripheralToMemory, &g_pingpong_desc[1]);
    DMA_SubmitTransfer(&g_DMA_Handle, &transferConfig);
    transferConfig.xfercfg.intA = false;
    transferConfig.xfercfg.intB = true;
    DMA_CreateDescriptor(&g_pingpong_desc[1], &transferConfig.xfercfg, (void *)&DMIC0->CHANNEL[kDMIC_Ch0].FIFO_DATA,
                         &g_data_buffer[BUFFER_LENGTH / 2], &g_pingpong_desc[0]);
    transferConfig.xfercfg.intA = true;
    transferConfig.xfercfg.intB = false;
    DMA_CreateDescriptor(&g_pingpong_desc[0], &transferConfig.xfercfg, (void *)&DMIC0->CHANNEL[kDMIC_Ch0].FIFO_DATA,
                         &g_data_buffer[0], &g_pingpong_desc[1]);
    DMA_StartTransfer(&g_DMA_Handle);
~~~~~

## DMIC use case {#DMADMICInterrupt}
~~~~~{.c}
void DMA_Callback(dma_handle_t *handle, void *param, bool transferDone, uint32_t tcds)
{
    if (tcds == kDMA_IntB)
    {
    }
    if (tcds == kDMA_IntA)
    {
    }
    if (first_int == 0U)
    {
        audioPosition = 0U;
        first_int = 1U;
    }
}
~~~~~

*/

/*!
@defgroup dmic_driver DMIC Driver
@ingroup dmic
*/

/*!
@defgroup dmic_dma_driver DMIC DMA Driver
@ingroup dmic
*/

